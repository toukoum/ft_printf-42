====================================
EXPLICATION DES FLAGS
====================================

- `#` : Un caractère `#` spécifiant que la valeur doit être imprimée dans une « forme alternative ». 
Pour les formats b, c, d, s et u, cette option n'a aucun effet. Pour le format x (X), un résultat non nul a la chaîne `0x` (`0X`) préfixée. 

- `-` : Un signe moins `-` qui spécifie l'ajustement à gauche de la sortie dans le champ indiqué ;

- `+` : Un caractère `+` spécifiant qu'il devrait toujours y avoir un signe placé devant le nombre lors de l'utilisation des formats signés.

- ` ` (espace) : Un espace spécifiant qu'un espace doit être laissé avant un nombre positif pour un format signé. Un `+` annule un espace si les deux sont utilisés ;

- `0` : Un caractère zéro `0` indiquant que le remplissage par des zéros doit être utilisé plutôt que le remplissage par des espaces. Un `-` annule un `0` si 
les deux sont utilisés ;

Largeur de champ :
- Une chaîne de chiffres optionnelle spécifiant une largeur de champ ; si la chaîne de sortie a moins de bytes que la largeur de champ,
elle sera remplie d'espaces à gauche (ou à droite, si l'indicateur d'ajustement à gauche a été donné) pour compléter la largeur de champ 
(notez qu'un zéro initial est un drapeau, mais un zéro intégré fait partie de la largeur de champ).

Précision :
- Une période optionnelle, `.`, suivie par une chaîne de chiffres optionnelle donnant une précision qui spécifie le nombre de chiffres
 à apparaître après le point décimal, pour les formats e et f, ou le nombre maximum de bytes à imprimer d'une chaîne ; si la chaîne de chiffres est absente,
  la précision est traitée comme zéro.

====================================
PRIORITE
====================================


    Flags '-' et '0':
        Si les deux sont présents, '-' a la priorité et le flag '0' est ignoré. L'alignement à gauche est donc effectué et le remplissage avec des zéros n'est pas fait.
        Exemple : %0-5d et %-05d donneront le même résultat car le '-' l'emporte.

    Flags ' ' et '+':
        Le flag '+' a la priorité sur ' '. Si les deux sont présents, seul le '+' est pris en compte pour forcer l'affichage du signe.
        Exemple : % +d et %+ d traiteront l'espace comme s'il n'était pas là.

    Flag '.' pour la Précision:
        La précision vient toujours après la largeur (si spécifiée) et est introduite par un point.
        Elle affecte le nombre de chiffres après la virgule pour les flottants, le nombre de chiffres affichés pour les entiers, et le nombre maximal de caractères pour les chaînes.
        L'ordre de la précision par rapport aux autres flags n'est pas important, mais elle doit venir après la largeur si celle-ci est spécifiée.

    Flag '#':
        Pour les conversions %o, %x, %X, le flag '#' peut être placé n'importe où après le % et avant le spécificateur de type. Il a le même effet peu importe sa position.



====================================
APPLICATION DES FLAGS
====================================


    %c - Caractère:
        '-' : Aligner à gauche le caractère dans le champ spécifié.
        '0' : Généralement non applicable pour les caractères.
        '.' : Non applicable.
        '#' : Non applicable.
        ' ' : Non applicable.
        '+' : Non applicable.

    %s - Chaîne de caractères:
        '-' : Aligner à gauche la chaîne dans le champ spécifié.
        '0' : Non applicable.
        '.' : Tronquer la chaîne à la longueur spécifiée par la précision.
        '#' : Non applicable.
        ' ' : Non applicable.
        '+' : Non applicable.

    %p - Pointeur (adresse mémoire):
        '-' : Aligner à gauche l'adresse dans le champ spécifié.
        '0' : Non applicable, l'adresse est toujours précédée de 0x.
        '.' : Non applicable.
        '#' : Non applicable, 0x est toujours inclus.
        ' ' : Non applicable.
        '+' : Non applicable.

    %d / %i - Entier signé:
        '-' : Aligner à gauche le nombre dans le champ spécifié.
        '0' : Remplir avec des zéros si aucune précision n'est donnée.
        '.' : Fixe la précision du nombre, écrasant le flag '0'.
        '#' : Non applicable.
        ' ' : Ajouter un espace si le nombre est positif.
        '+' : Toujours afficher le signe du nombre.

    %u - Entier non signé:
        '-' : Aligner à gauche le nombre dans le champ spécifié.
        '0' : Remplir avec des zéros si aucune précision n'est donnée.
        '.' : Fixe la précision du nombre, écrasant le flag '0'.
        '#' : Non applicable.
        ' ' : Non applicable.
        '+' : Non applicable.

    %x / %X - Entier non signé en hexadécimal:
        '-' : Aligner à gauche le nombre dans le champ spécifié.
        '0' : Remplir avec des zéros si aucune précision n'est donnée.
        '.' : Fixe la précision du nombre, écrasant le flag '0'.
        '#' : Ajoute 0x ou 0X au début si le nombre n'est pas zéro.
        ' ' : Non applicable.
        '+' : Non applicable.

    %% - Pourcentage:
        '-' : Aligner à gauche le signe pourcentage dans le champ spécifié.
        '0' : Remplir avec des zéros si le champ est spécifié.
        '.' : Non applicable.
        '#' : Non applicable.
        ' ' : Non applicable.
        '+' : Non applicable.
    


====================================
PLAN ET LOGIQUE PRINCIPALE
====================================


Étape 1: Initialisation

    Définissez une structure pour stocker les indicateurs.
    Initialisez la structure en mettant tous les indicateurs à zéro pour chaque nouvel appel à ft_printf().

Étape 2: Lecture de la chaîne de format

    Commencez à parcourir la chaîne de format caractère par caractère.
    Recherchez le caractère %, qui indique le début d'un spécificateur de format.

Étape 3: Identification des spécificateurs de format

    Une fois % trouvé, passez au caractère suivant pour commencer l'analyse des drapeaux et des spécifications de format.

Étape 4: Parsing des drapeaux

    Drapeaux valides : '-0.# +'
    Lisez et traitez les drapeaux dans l'ordre où ils apparaissent jusqu'à ce que vous atteigniez un caractère qui n'est pas un drapeau valide.
    Utilisez un switch ou des if imbriqués pour traiter chaque drapeau :
        Pour '-' : Set flags.minus à 1.
        Pour '0' : Set flags.zero à 1.
        Pour '.' : Passez à la gestion de la précision.
        Pour '#' : Set flags.hashtag à 1.
        Pour '+' : Set flags.plus à 1.
        Pour ' ' : Set flags.space à 1.

Étape 5: Parsing de la largeur

    Si le caractère après les drapeaux est un chiffre, lisez la séquence numérique pour obtenir la largeur du champ et stockez-la dans flags.width.

Étape 6: Parsing de la précision

    Si vous trouvez un ., cela indique la précision.
    Lisez la séquence numérique suivant le . pour obtenir la précision et stockez-la dans flags.precision.

Étape 7: Gestion des conflits de drapeaux

    Vérifiez la cohérence des drapeaux et résolvez les conflits (par exemple, si à la fois '-0' sont définis, ignorez '0').

Étape 8: Identification du spécificateur de conversion

    Après les drapeaux, la largeur, et la précision, le prochain caractère devrait être le spécificateur de conversion (ex : c, s, p, d, i, u, x, X, %).
    Validez le spécificateur et préparez-vous à appeler la fonction de traitement correspondante.

Étape 9: Traitement des spécificateurs

    Appelez la fonction appropriée pour le spécificateur de format identifié et passez-lui la structure des indicateurs et tout argument nécessaire.

Étape 10: Itération

    Après avoir traité un spécificateur de format, continuez à lire la chaîne de format pour le prochain spécificateur jusqu'à la fin de la chaîne.

====================================
PSEUDO CODE DE LA LOGIQUE: 
====================================


while (*format) {
    // Analyse des drapeaux.
    while (*format est un drapeau valide) {
        // Traiter le drapeau
        format++;
    }

    // Analyse de la largeur.
    if (isdigit(*format) || *format == '*') {
        // Traiter la largeur
        format++;
    }

    // Analyse de la précision.
    if (*format == '.') {
        format++; // Passez le '.'
        if (isdigit(*format) || *format == '*') {
            // Traiter la précision
            format++;
        }
    }

    // Vérification du spécificateur de conversion.
    if (*format est un spécificateur de conversion valide) {
        // Traiter le spécificateur
        format++;
        break; // Sortie de la boucle après avoir traité un spécificateur de format.
    }

    if (*format == '\0') {
        // Fin de la chaîne de format
        break;
    }
}




